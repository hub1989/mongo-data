{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 Provides an easy-to-use implementation of a mongo repository. Using generics, you can plug in your mongo Documents, get functionality out of the box and reduce boilerplate. Who do I talk to? \u00b6 Robinson Mgbah - mongo@ebrinktech.com","title":"Home"},{"location":"#home","text":"Provides an easy-to-use implementation of a mongo repository. Using generics, you can plug in your mongo Documents, get functionality out of the box and reduce boilerplate.","title":"Home"},{"location":"#who-do-i-talk-to","text":"Robinson Mgbah - mongo@ebrinktech.com","title":"Who do I talk to?"},{"location":"logging/logging/","text":"Logging \u00b6 Provides an easy-to-use implementation of a mongo repository. Using generics, you can plug in your mongo Documents, get functionality out of the box and reduce boilerplate.","title":"Logging"},{"location":"logging/logging/#logging","text":"Provides an easy-to-use implementation of a mongo repository. Using generics, you can plug in your mongo Documents, get functionality out of the box and reduce boilerplate.","title":"Logging"},{"location":"structure/structure/","text":"Structure \u00b6 Provides an easy-to-use implementation of a mongo repository. Using generics, you can plug in your mongo Documents, get functionality out of the box and reduce boilerplate.","title":"Structure"},{"location":"structure/structure/#structure","text":"Provides an easy-to-use implementation of a mongo repository. Using generics, you can plug in your mongo Documents, get functionality out of the box and reduce boilerplate.","title":"Structure"},{"location":"testing/testing/","text":"Test Dependencies \u00b6 test containers testify Test flow \u00b6 define an entity/document type you'd like to test for 1 2 3 4 5 6 7 8 9 10 11 12 type TestEntity struct { Id primitive . ObjectID `bson:\"_id\" json:\"id\"` Name string `bson:\"name\" json:\"name\"` } func ( t TestEntity ) GetId () primitive . ObjectID { return t . Id } func ( t TestEntity ) SetId ( id primitive . ObjectID ) { t . Id = id } set up a test suite using test containers 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 func ( s * EntityTestSuite ) SetupSuite () { port := \"27017/tcp\" ctx := context . Background () req := testcontainers . ContainerRequest { Image : \"mongo:6\" , ExposedPorts : [] string { port }, Env : map [ string ] string { \"MONGO_INITDB_ROOT_USERNAME\" : \"test\" , \"MONGO_INITDB_ROOT_PASSWORD\" : \"test\" , \"MONGO_INITDB_DATABASE\" : \"admin\" , }, } mongoC , err := testcontainers . GenericContainer ( ctx , testcontainers . GenericContainerRequest { ContainerRequest : req , Started : true , }) if err != nil { log . Fatal ( err ) } endpoint , _ := mongoC . Endpoint ( ctx , \"\" ) s . MongoURI = fmt . Sprintf ( \"mongodb://test:test@%s/\" , endpoint ) configService := configuration . DefaultDBConfigService { MongoURI : s . MongoURI , DatabaseName : \"test-db\" , } client := configService . ConnectDB () collection := client . Database ( configService . DatabaseName ). Collection ( \"test_entities\" ) s . Collection = collection repository := MongoRepository [ TestEntity ]{ Collection : collection } s . MongoRepository = repository } test the methods you're interested in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func ( s * EntityTestSuite ) TestMongoRepository_Create () { request := TestEntity { Id : primitive . NewObjectID (), Name : \"test\" , } saved , err := s . MongoRepository . Save ( context . Background (), request ) s . Nil ( err ) s . NotNil ( saved ) fromDB , err := s . MongoRepository . FindById ( context . TODO (), request . Id ) s . Nil ( err ) s . Equal ( request . Name , fromDB . Name ) }","title":"Testing"},{"location":"testing/testing/#test-dependencies","text":"test containers testify","title":"Test Dependencies"},{"location":"testing/testing/#test-flow","text":"define an entity/document type you'd like to test for 1 2 3 4 5 6 7 8 9 10 11 12 type TestEntity struct { Id primitive . ObjectID `bson:\"_id\" json:\"id\"` Name string `bson:\"name\" json:\"name\"` } func ( t TestEntity ) GetId () primitive . ObjectID { return t . Id } func ( t TestEntity ) SetId ( id primitive . ObjectID ) { t . Id = id } set up a test suite using test containers 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 func ( s * EntityTestSuite ) SetupSuite () { port := \"27017/tcp\" ctx := context . Background () req := testcontainers . ContainerRequest { Image : \"mongo:6\" , ExposedPorts : [] string { port }, Env : map [ string ] string { \"MONGO_INITDB_ROOT_USERNAME\" : \"test\" , \"MONGO_INITDB_ROOT_PASSWORD\" : \"test\" , \"MONGO_INITDB_DATABASE\" : \"admin\" , }, } mongoC , err := testcontainers . GenericContainer ( ctx , testcontainers . GenericContainerRequest { ContainerRequest : req , Started : true , }) if err != nil { log . Fatal ( err ) } endpoint , _ := mongoC . Endpoint ( ctx , \"\" ) s . MongoURI = fmt . Sprintf ( \"mongodb://test:test@%s/\" , endpoint ) configService := configuration . DefaultDBConfigService { MongoURI : s . MongoURI , DatabaseName : \"test-db\" , } client := configService . ConnectDB () collection := client . Database ( configService . DatabaseName ). Collection ( \"test_entities\" ) s . Collection = collection repository := MongoRepository [ TestEntity ]{ Collection : collection } s . MongoRepository = repository } test the methods you're interested in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 func ( s * EntityTestSuite ) TestMongoRepository_Create () { request := TestEntity { Id : primitive . NewObjectID (), Name : \"test\" , } saved , err := s . MongoRepository . Save ( context . Background (), request ) s . Nil ( err ) s . NotNil ( saved ) fromDB , err := s . MongoRepository . FindById ( context . TODO (), request . Id ) s . Nil ( err ) s . Equal ( request . Name , fromDB . Name ) }","title":"Test flow"},{"location":"usage/usage/","text":"Usage \u00b6 Provides an easy-to-use implementation of a mongo repository. Using generics, you can plug in your mongo Documents, get functionality out of the box and reduce boilerplate.","title":"Usage"},{"location":"usage/usage/#usage","text":"Provides an easy-to-use implementation of a mongo repository. Using generics, you can plug in your mongo Documents, get functionality out of the box and reduce boilerplate.","title":"Usage"},{"location":"tags.html","text":"Contents grouped by tag \u00b6 getting started \u00b6 * Untitled logging \u00b6 * Untitled mongo \u00b6 * Untitled * Untitled * Untitled * Untitled structure \u00b6 * Untitled test containers \u00b6 * Untitled testing \u00b6 * Untitled usage \u00b6 * Untitled welcome \u00b6 * Untitled","title":"Tags"},{"location":"tags.html#contents-grouped-by-tag","text":"","title":"Contents grouped by tag"},{"location":"tags.html#getting-started","text":"* Untitled","title":"getting started"},{"location":"tags.html#logging","text":"* Untitled","title":"logging"},{"location":"tags.html#mongo","text":"* Untitled * Untitled * Untitled * Untitled","title":"mongo"},{"location":"tags.html#structure","text":"* Untitled","title":"structure"},{"location":"tags.html#test-containers","text":"* Untitled","title":"test containers"},{"location":"tags.html#testing","text":"* Untitled","title":"testing"},{"location":"tags.html#usage","text":"* Untitled","title":"usage"},{"location":"tags.html#welcome","text":"* Untitled","title":"welcome"}]}